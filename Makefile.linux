ZJS_BASE = $(shell pwd)

JERRY_BASE ?= $(ZJS_BASE)/deps/jerryscript

BUILD_DIR = $(ZJS_BASE)/outdir/linux

CORE_SRC +=	src/main.c 

CORE_OBJ =	$(CORE_SRC:%.c=%.o)

LINUX_INCLUDES += 	-Isrc/ \
			-I$(ZJS_BASE)/outdir/include \
			-I$(JERRY_BASE)/jerry-core \
			-I$(JERRY_BASE)/targets/default

JERRY_LIBS += 		-l jerry-core -lm

JERRY_LIB_PATH += 	-L $(JERRY_BASE)/build/lib/

LINUX_LIBS +=		$(JERRY_LIBS)

ifeq ($(shell uname -s), Linux)
LINUX_LIBS +=		-pthread
endif

LINUX_DEFINES +=	-DZJS_LINUX_BUILD \
			-DBUILD_MODULE_EVENTS \
			-DBUILD_MODULE_PERFORMANCE \
			-DBUILD_MODULE_CONSOLE \
			-DZJS_PRINT_FLOATS \
			-DBUILD_MODULE_BUFFER \
			-DBUILD_MODULE_TEST_PROMISE

LINUX_FLAGS += 	-fno-asynchronous-unwind-tables \
		-fno-omit-frame-pointer \
		-Wno-format-zero-length \
		-Wno-main \
		-ffreestanding \
		-Os \
		-fno-stack-protector \
		-ffunction-sections \
		-fdata-sections \
		-fno-strict-overflow \
		-Werror=implicit-int \
		-Wall \
		-std=gnu99 \
		-flto

ifeq ($(VARIANT), debug)
LINUX_DEFINES += -DDEBUG_BUILD -DOC_DEBUG
LINUX_FLAGS += -g
endif

ifeq ($(CB_STATS), on)
LINUX_DEFINES += -DZJS_PRINT_CALLBACK_STATS
endif

ifeq ($(V), 1)
VERBOSE=-v
endif

BUILD_OBJ = $(CORE_OBJ:%.o=$(BUILD_DIR)/%.o)


.PHONY: all
all: linux

$(BUILD_DIR)/%.o:%.c
	@mkdir -p $(@D)
	@echo [CC] $@
	@gcc -c -o $@ $< -Wall -Werror $(LINUX_INCLUDES) $(LINUX_DEFINES) $(LINUX_FLAGS)

.PHONY: linux
linux: $(BUILD_OBJ)
	cd deps/jerryscript; python ./tools/build.py --error-messages ON $(VERBOSE) --mem-heap 16;
	echo [LD] $(BUILD_DIR)/jslinux
	gcc $(LINUX_INCLUDES) $(JERRY_LIB_PATH) -o $(BUILD_DIR)/jslinux $(BUILD_OBJ) $(LINUX_FLAGS) $(CFLAGS) $(LINUX_DEFINES) $(LINUX_LIBS)

.PHONY: clean
clean:
	rm -rf $(ZJS_BASE)/outdir/linux/
	rm -rf $(JERRY_BASE)/build/lib/
